openapi: 3.0.3
info:
  title: Swagger myapp - OpenAPI 3.0
  description: >
    Welcome to the Swagger TODO API documentation. This API provides endpoints for managing tasks and to-do items.
    You can use this API to create, update, retrieve, and delete tasks, as well as perform other task-related operations.
    This documentation follows the OpenAPI 3.0 specification and serves as a comprehensive guide for interacting with task data in a standardized manner.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.1
tags:
  - name: Task
    description: Everything about your task

paths:
  /tasks:
    get:
      tags:
        - Task
      summary: Get all tasks
      description: Retrieve a list of all available tasks.
      operationId: task.get_tasks
      parameters:
        - name: status
          in: query
          description: Filter tasks by status
          schema:
            type: string
            enum:
              - to_do
              - in_progress
              - done
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Bad Request
      security:
        - bearerAuth: []

    post:
      tags:
        - Task
      summary: Add a new task
      description: Create and add a new task to the application.
      operationId: task.create_task
      requestBody:
        description: Task details to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /tasks/{task_id}:
    parameters:
      - name: task_id
        in: path
        description: ID of the task to operate on
        required: true
        schema:
          type: integer
          format: int64

    get:
      tags:
        - Task
      summary: Get task by ID
      description: Retrieve a single task by its ID.
      operationId: task.get_task_by_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

    delete:
      tags:
        - Task
      summary: Delete a task
      description: Delete a task by its ID.
      operationId: task.delete_task
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
      security:
        - bearerAuth: []

    put:
      tags:
        - Task
      summary: Update an existing task
      description: Modify the details of an existing task using its unique ID.
      operationId: task.update_task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /login:
    post:
      tags:
        - Login
      summary: Get token
      operationId: login.login
      requestBody:
        description: Get token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        '405':
          description: Invalid input
        '401':
          $ref: '#/components/responses/InvalidPassword'

components:
  schemas:
    Login:
      type: object
      properties:
        password:
          type: string
          example: 'secretdata1@11'
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - to_do
            - in_progress
            - done
      required:
        - title
        - status

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InvalidPassword:
      description: Contains invalid credentials
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: login.decode_token